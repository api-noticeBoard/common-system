plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'java-library'   // api와 implementation을 구분하는 라이브러리용 plugin
	id 'maven-publish'  // 배포를 위한 plugin
}

group = 'com.portfolio'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// 라이브러리로 만들기 위해 필요치 않고 문제가 생김 (버전충돌 및 불필요한 의존성 전파)
//	implementation 'org.springframework.boot:spring-boot-starter'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Add Spring AOP Starter
	// api 사용시 모듈 사용하는 프로젝트에 별도 추가 없이 전이 의존성 제공
	api 'org.springframework.boot:spring-boot-starter-aop'
	// HttpStatus, ResponseEntity 사용을 위한 의존성 추가
	api 'org.springframework.boot:spring-boot-starter-web'

	// 테스트에서 lombok 및 springboot-web사용을 위해 추가
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-aop'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
	// 테스트를 실행할 때, main 소스셋의 컴파일된 클래스와 리소스들을
	// 테스트 클래스패스에 포함시킵니다.
	test {
		java.srcDirs = ['src/test/java']
		resources.srcDirs = ['src/test/resources']
		// 이 부분이 핵심입니다.
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// 실행 불가인 순수 Jar 만드는 설정 (라이브러리)
jar {enabled=true}
bootJar {enabled=false}

// publishing 설정: GitHubPackages로 배포하기 위한 핵심
publishing{
	publications {
		maven(MavenPublication) {
			from components.java

			// github packages 사용을 위한 명확히 표기
			groupId = 'com.portfolio'
			artifactId = 'common-system'	// 원하는 artifactId 명확히 지정
			version = '0.0.1-SNAPSHOT'

			// version mapping
			versionMapping {
				// 'api'로 선언된 의존성에 대한 버전 매핑
				usage('java-api'){
					fromResolutionResult()
				}
				// 'implementation' 선언된 의존성에 대한 버전 매핑
				usage('java-runtime'){
					fromResolutionResult()
				}
			}
		}
	}
	repositories{
		maven{
			name = "GitHubPackages"
			// System.getenv = .github/workflows/publish.yml의 env 설정
			def repoPath = System.getenv("GPR_SYS_PATH") ?: project.findProperty("gpr.sys.path")
			// URL: https://maven.pkg.github.com/{조직명}/{저장소}
			url = "https://maven.pkg.github.com/${repoPath}"
			credentials{
				// CI환경(github actions)과 로컬PC 모두 지원하는 방식
				username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("gpr.user")
				password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.token")
			}
		}
	}
}